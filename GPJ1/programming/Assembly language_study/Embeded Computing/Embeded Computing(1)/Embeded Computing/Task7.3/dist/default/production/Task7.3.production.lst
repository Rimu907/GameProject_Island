

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon May 04 11:20:35 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F887
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	dabs	1,0x7E,2
    16  0000                     
    17                           ; Version 2.10
    18                           ; Generated 31/07/2019 GMT
    19                           ; 
    20                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F887 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51  0000                     	;# 
    52  0001                     	;# 
    53  0002                     	;# 
    54  0003                     	;# 
    55  0004                     	;# 
    56  0005                     	;# 
    57  0006                     	;# 
    58  0007                     	;# 
    59  0008                     	;# 
    60  0009                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000D                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0014                     	;# 
    73  0015                     	;# 
    74  0015                     	;# 
    75  0016                     	;# 
    76  0017                     	;# 
    77  0018                     	;# 
    78  0019                     	;# 
    79  001A                     	;# 
    80  001B                     	;# 
    81  001B                     	;# 
    82  001C                     	;# 
    83  001D                     	;# 
    84  001E                     	;# 
    85  001F                     	;# 
    86  0081                     	;# 
    87  0085                     	;# 
    88  0086                     	;# 
    89  0087                     	;# 
    90  0088                     	;# 
    91  0089                     	;# 
    92  008C                     	;# 
    93  008D                     	;# 
    94  008E                     	;# 
    95  008F                     	;# 
    96  0090                     	;# 
    97  0091                     	;# 
    98  0092                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0094                     	;# 
   103  0095                     	;# 
   104  0096                     	;# 
   105  0097                     	;# 
   106  0098                     	;# 
   107  0099                     	;# 
   108  009A                     	;# 
   109  009B                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  0105                     	;# 
   115  0107                     	;# 
   116  0108                     	;# 
   117  0109                     	;# 
   118  010C                     	;# 
   119  010C                     	;# 
   120  010D                     	;# 
   121  010E                     	;# 
   122  010F                     	;# 
   123  0185                     	;# 
   124  0187                     	;# 
   125  0188                     	;# 
   126  0189                     	;# 
   127  018C                     	;# 
   128  018D                     	;# 
   129  0000                     	;# 
   130  0001                     	;# 
   131  0002                     	;# 
   132  0003                     	;# 
   133  0004                     	;# 
   134  0005                     	;# 
   135  0006                     	;# 
   136  0007                     	;# 
   137  0008                     	;# 
   138  0009                     	;# 
   139  000A                     	;# 
   140  000B                     	;# 
   141  000C                     	;# 
   142  000D                     	;# 
   143  000E                     	;# 
   144  000E                     	;# 
   145  000F                     	;# 
   146  0010                     	;# 
   147  0011                     	;# 
   148  0012                     	;# 
   149  0013                     	;# 
   150  0014                     	;# 
   151  0015                     	;# 
   152  0015                     	;# 
   153  0016                     	;# 
   154  0017                     	;# 
   155  0018                     	;# 
   156  0019                     	;# 
   157  001A                     	;# 
   158  001B                     	;# 
   159  001B                     	;# 
   160  001C                     	;# 
   161  001D                     	;# 
   162  001E                     	;# 
   163  001F                     	;# 
   164  0081                     	;# 
   165  0085                     	;# 
   166  0086                     	;# 
   167  0087                     	;# 
   168  0088                     	;# 
   169  0089                     	;# 
   170  008C                     	;# 
   171  008D                     	;# 
   172  008E                     	;# 
   173  008F                     	;# 
   174  0090                     	;# 
   175  0091                     	;# 
   176  0092                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0094                     	;# 
   181  0095                     	;# 
   182  0096                     	;# 
   183  0097                     	;# 
   184  0098                     	;# 
   185  0099                     	;# 
   186  009A                     	;# 
   187  009B                     	;# 
   188  009C                     	;# 
   189  009D                     	;# 
   190  009E                     	;# 
   191  009F                     	;# 
   192  0105                     	;# 
   193  0107                     	;# 
   194  0108                     	;# 
   195  0109                     	;# 
   196  010C                     	;# 
   197  010C                     	;# 
   198  010D                     	;# 
   199  010E                     	;# 
   200  010F                     	;# 
   201  0185                     	;# 
   202  0187                     	;# 
   203  0188                     	;# 
   204  0189                     	;# 
   205  018C                     	;# 
   206  018D                     	;# 
   207  0010                     _T1CON	set	16
   208  0009                     _PORTE	set	9
   209  0007                     _PORTC	set	7
   210  0005                     _PORTA	set	5
   211  0008                     _PORTD	set	8
   212  0006                     _PORTB	set	6
   213  001E                     _ADRESH	set	30
   214  001F                     _ADCON0	set	31
   215  005F                     _GIE	set	95
   216  005C                     _INTE	set	92
   217  005E                     _PEIE	set	94
   218  0059                     _INTF	set	89
   219  0060                     _TMR1IF	set	96
   220  0066                     _ADIF	set	102
   221  009F                     _ADCON1	set	159
   222  0081                     _OPTION_REG	set	129
   223  0089                     _TRISE	set	137
   224  0088                     _TRISD	set	136
   225  0087                     _TRISC	set	135
   226  0086                     _TRISB	set	134
   227  0085                     _TRISA	set	133
   228  0460                     _TMR1IE	set	1120
   229  0466                     _ADIE	set	1126
   230  040E                     _INTEDG	set	1038
   231  0188                     _ANSEL	set	392
   232  0189                     _ANSELH	set	393
   233                           
   234                           ; #config settings
   235  0000                     
   236                           	psect	cinit
   237  000F                     start_initialization:	
   238  000F                     __initialization:	
   239                           
   240                           ; Clear objects allocated to COMMON
   241  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   242  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   243                           
   244                           ; Clear objects allocated to BANK0
   245  0011  1283               	bcf	3,5	;RP0=0, select bank0
   246  0012  1303               	bcf	3,6	;RP1=0, select bank0
   247  0013  01A0               	clrf	__pbssBANK0& (0+127)
   248  0014  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   249  0015  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   250  0016  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   251  0017  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   252  0018  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   253  0019                     end_of_initialization:	
   254                           ;End of C runtime variable initialization code
   255                           
   256  0019                     __end_of__initialization:	
   257  0019  0183               	clrf	3
   258  001A  120A  118A  281D   	ljmp	_main	;jump to C main() function
   259                           
   260                           	psect	bssCOMMON
   261  0078                     __pbssCOMMON:	
   262  0078                     _sw:	
   263  0078                     	ds	1
   264  0079                     _Temp:	
   265  0079                     	ds	1
   266                           
   267                           	psect	bssBANK0
   268  0020                     __pbssBANK0:	
   269  0020                     _countE:	
   270  0020                     	ds	2
   271  0022                     _countT:	
   272  0022                     	ds	2
   273  0024                     _countA:	
   274  0024                     	ds	2
   275                           
   276                           	psect	cstackCOMMON
   277  0070                     __pcstackCOMMON:	
   278  0070                     ?_ReadADC:	
   279  0070                     ?_ReadSw:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ?_Select4:	
   283                           ; 1 bytes @ 0x0
   284                           
   285  0070                     ?_myISR:	
   286                           ; 1 bytes @ 0x0
   287                           
   288  0070                     ??_myISR:	
   289                           ; 1 bytes @ 0x0
   290                           
   291  0070                     ?_main:	
   292                           ; 1 bytes @ 0x0
   293                           
   294                           
   295                           ; 2 bytes @ 0x0
   296  0070                     	ds	2
   297  0072                     ??_ReadADC:	
   298  0072                     ??_ReadSw:	
   299                           ; 1 bytes @ 0x2
   300                           
   301                           
   302                           ; 1 bytes @ 0x2
   303  0072                     	ds	2
   304  0074                     ReadSw@tmp:	
   305                           
   306                           ; 1 bytes @ 0x4
   307  0074                     	ds	1
   308  0075                     ??_Select4:	
   309                           
   310                           ; 1 bytes @ 0x5
   311  0075                     	ds	3
   312                           
   313                           	psect	cstackBANK0
   314  0026                     __pcstackBANK0:	
   315  0026                     Select4@tmp:	
   316                           
   317                           ; 1 bytes @ 0x0
   318  0026                     	ds	1
   319  0027                     Select4@oldLEDs:	
   320                           
   321                           ; 1 bytes @ 0x1
   322  0027                     	ds	1
   323  0028                     Select4@result:	
   324                           
   325                           ; 1 bytes @ 0x2
   326  0028                     	ds	1
   327  0029                     ??_main:	
   328                           
   329                           ; 1 bytes @ 0x3
   330  0029                     	ds	3
   331                           
   332                           	psect	maintext
   333  001D                     __pmaintext:	
   334 ;;
   335 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   336 ;;
   337 ;; *************** function _main *****************
   338 ;; Defined at:
   339 ;;		line 9 in file "main.c"
   340 ;; Parameters:    Size  Location     Type
   341 ;;		None
   342 ;; Auto vars:     Size  Location     Type
   343 ;;		None
   344 ;; Return value:  Size  Location     Type
   345 ;;                  2   95[None  ] int 
   346 ;; Registers used:
   347 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   348 ;; Tracked objects:
   349 ;;		On entry : B00/0
   350 ;;		On exit  : 0/0
   351 ;;		Unchanged: 0/0
   352 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   353 ;;      Params:         0       0       0       0       0
   354 ;;      Locals:         0       0       0       0       0
   355 ;;      Temps:          0       3       0       0       0
   356 ;;      Totals:         0       3       0       0       0
   357 ;;Total ram usage:        3 bytes
   358 ;; Hardware stack levels required when called:    3
   359 ;; This function calls:
   360 ;;		_ReadADC
   361 ;;		_ReadSw
   362 ;;		_Select4
   363 ;; This function is called by:
   364 ;;		Startup code after reset
   365 ;; This function uses a non-reentrant model
   366 ;;
   367                           
   368                           
   369                           ;psect for function _main
   370  001D                     _main:	
   371  001D                     l1155:	
   372                           ;incstack = 0
   373                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   374                           
   375                           
   376                           ;./init.c: 4:  PORTA=0; PORTB=0; PORTC=0; PORTD=0; PORTE=0;
   377  001D  1283               	bcf	3,5	;RP0=0, select bank0
   378  001E  1303               	bcf	3,6	;RP1=0, select bank0
   379  001F  0185               	clrf	5	;volatile
   380  0020  0186               	clrf	6	;volatile
   381  0021  0187               	clrf	7	;volatile
   382  0022  0188               	clrf	8	;volatile
   383  0023  0189               	clrf	9	;volatile
   384                           
   385                           ;./init.c: 7:  ANSELH= 0;
   386  0024  1683               	bsf	3,5	;RP0=1, select bank3
   387  0025  1703               	bsf	3,6	;RP1=1, select bank3
   388  0026  0189               	clrf	9	;volatile
   389  0027                     l1157:	
   390                           
   391                           ;./init.c: 8:  ANSEL = 0b00000001;
   392  0027  3001               	movlw	1
   393  0028  0088               	movwf	8	;volatile
   394  0029                     l1159:	
   395                           
   396                           ;./init.c: 9:  TRISA = 0b00000001;
   397  0029  3001               	movlw	1
   398  002A  1683               	bsf	3,5	;RP0=1, select bank1
   399  002B  1303               	bcf	3,6	;RP1=0, select bank1
   400  002C  0085               	movwf	5	;volatile
   401  002D                     l1161:	
   402                           
   403                           ;./init.c: 12:  TRISB = 0b00000001;
   404  002D  3001               	movlw	1
   405  002E  0086               	movwf	6	;volatile
   406  002F                     l1163:	
   407                           
   408                           ;./init.c: 15:  TRISC=0; TRISD=0; TRISE=0b11111000;
   409  002F  0187               	clrf	7	;volatile
   410  0030                     l1165:	
   411  0030  0188               	clrf	8	;volatile
   412  0031                     l1167:	
   413  0031  30F8               	movlw	248
   414  0032  0089               	movwf	9	;volatile
   415  0033                     l1169:	
   416                           
   417                           ;./init.c: 18:  OPTION_REG = 0b00001000;
   418  0033  3008               	movlw	8
   419  0034  0081               	movwf	1	;volatile
   420  0035                     l1171:	
   421                           
   422                           ;./init.c: 21:  ADCON1 = 0;
   423  0035  019F               	clrf	31	;volatile
   424                           
   425                           ;./init.c: 22:  ADCON0 = 0b01000001;
   426  0036  3041               	movlw	65
   427  0037  1283               	bcf	3,5	;RP0=0, select bank0
   428  0038  1303               	bcf	3,6	;RP1=0, select bank0
   429  0039  009F               	movwf	31	;volatile
   430                           
   431                           ;./init.c: 25:  PORTD = 0xFF;
   432  003A  30FF               	movlw	255
   433  003B  0088               	movwf	8	;volatile
   434                           
   435                           ;./init.c: 26:  _delay((unsigned long)((300)*(4000000/4000.0)));
   436  003C  3002               	movlw	2
   437  003D  1283               	bcf	3,5	;RP0=0, select bank0
   438  003E  1303               	bcf	3,6	;RP1=0, select bank0
   439  003F  00AB               	movwf	??_main+2
   440  0040  3086               	movlw	134
   441  0041  00AA               	movwf	??_main+1
   442  0042  3098               	movlw	152
   443  0043  00A9               	movwf	??_main
   444  0044                     u437:	
   445  0044  0BA9               	decfsz	??_main,f
   446  0045  2844               	goto	u437
   447  0046  0BAA               	decfsz	??_main+1,f
   448  0047  2844               	goto	u437
   449  0048  0BAB               	decfsz	??_main+2,f
   450  0049  2844               	goto	u437
   451  004A  0000               	nop
   452  004B                     l1173:	
   453                           
   454                           ;./init.c: 27:  PORTD = 0;
   455  004B  1283               	bcf	3,5	;RP0=0, select bank0
   456  004C  1303               	bcf	3,6	;RP1=0, select bank0
   457  004D  0188               	clrf	8	;volatile
   458  004E                     l1175:	
   459                           
   460                           ;./init.c: 28:  _delay((unsigned long)((300)*(4000000/4000.0)));
   461  004E  3002               	movlw	2
   462  004F  1283               	bcf	3,5	;RP0=0, select bank0
   463  0050  1303               	bcf	3,6	;RP1=0, select bank0
   464  0051  00AB               	movwf	??_main+2
   465  0052  3086               	movlw	134
   466  0053  00AA               	movwf	??_main+1
   467  0054  3098               	movlw	152
   468  0055  00A9               	movwf	??_main
   469  0056                     u447:	
   470  0056  0BA9               	decfsz	??_main,f
   471  0057  2856               	goto	u447
   472  0058  0BAA               	decfsz	??_main+1,f
   473  0059  2856               	goto	u447
   474  005A  0BAB               	decfsz	??_main+2,f
   475  005B  2856               	goto	u447
   476  005C  0000               	nop
   477  005D                     l1177:	
   478                           
   479                           ;main.c: 15:      INTEDG = 1;
   480  005D  1683               	bsf	3,5	;RP0=1, select bank1
   481  005E  1303               	bcf	3,6	;RP1=0, select bank1
   482  005F  1701               	bsf	1,6	;volatile
   483  0060                     l1179:	
   484                           
   485                           ;main.c: 16:      T1CON = 0b00110001;
   486  0060  3031               	movlw	49
   487  0061  1283               	bcf	3,5	;RP0=0, select bank0
   488  0062  1303               	bcf	3,6	;RP1=0, select bank0
   489  0063  0090               	movwf	16	;volatile
   490  0064                     l1181:	
   491                           
   492                           ;main.c: 17:      ADIF = 0;
   493  0064  130C               	bcf	12,6	;volatile
   494  0065                     l1183:	
   495                           
   496                           ;main.c: 18:      TMR1IF = 0;
   497  0065  100C               	bcf	12,0	;volatile
   498  0066                     l1185:	
   499                           
   500                           ;main.c: 19:      INTF = 0;
   501  0066  108B               	bcf	11,1	;volatile
   502  0067                     l1187:	
   503                           
   504                           ;main.c: 20:      PEIE = 1;
   505  0067  170B               	bsf	11,6	;volatile
   506  0068                     l1189:	
   507                           
   508                           ;main.c: 21:      ADIE = 1;
   509  0068  1683               	bsf	3,5	;RP0=1, select bank1
   510  0069  1303               	bcf	3,6	;RP1=0, select bank1
   511  006A  170C               	bsf	12,6	;volatile
   512  006B                     l1191:	
   513                           
   514                           ;main.c: 22:      INTE = 1;
   515  006B  160B               	bsf	11,4	;volatile
   516  006C                     l1193:	
   517                           
   518                           ;main.c: 23:      TMR1IE = 1;
   519  006C  140C               	bsf	12,0	;volatile
   520  006D                     l1195:	
   521                           
   522                           ;main.c: 24:      GIE = 1;
   523  006D  178B               	bsf	11,7	;volatile
   524  006E                     l1197:	
   525                           
   526                           ;main.c: 26:      Temp = Select4();
   527  006E  120A  118A  20C8  120A  118A  	fcall	_Select4
   528  0073  1283               	bcf	3,5	;RP0=0, select bank0
   529  0074  1303               	bcf	3,6	;RP1=0, select bank0
   530  0075  00A9               	movwf	??_main
   531  0076  0829               	movf	??_main,w
   532  0077  00F9               	movwf	_Temp
   533  0078                     l1199:	
   534                           
   535                           ;main.c: 29:   ReadADC();
   536  0078  120A  118A  21A3  120A  118A  	fcall	_ReadADC
   537  007D                     l1201:	
   538                           
   539                           ;main.c: 30:         if(Temp == 0b00000001){
   540  007D  0379               	decf	_Temp,w
   541  007E  1D03               	btfss	3,2
   542  007F  2881               	goto	u371
   543  0080  2882               	goto	u370
   544  0081                     u371:	
   545  0081  2886               	goto	l1205
   546  0082                     u370:	
   547  0082                     l1203:	
   548                           
   549                           ;main.c: 31:             PORTD = countA;
   550  0082  1283               	bcf	3,5	;RP0=0, select bank0
   551  0083  1303               	bcf	3,6	;RP1=0, select bank0
   552  0084  0824               	movf	_countA,w
   553  0085  0088               	movwf	8	;volatile
   554  0086                     l1205:	
   555                           
   556                           ;main.c: 34:         if(Temp == 0b00000010){
   557  0086  3002               	movlw	2
   558  0087  0679               	xorwf	_Temp,w
   559  0088  1D03               	btfss	3,2
   560  0089  288B               	goto	u381
   561  008A  288C               	goto	u380
   562  008B                     u381:	
   563  008B  2890               	goto	l1209
   564  008C                     u380:	
   565  008C                     l1207:	
   566                           
   567                           ;main.c: 35:             PORTD = countT;
   568  008C  1283               	bcf	3,5	;RP0=0, select bank0
   569  008D  1303               	bcf	3,6	;RP1=0, select bank0
   570  008E  0822               	movf	_countT,w
   571  008F  0088               	movwf	8	;volatile
   572  0090                     l1209:	
   573                           
   574                           ;main.c: 38:         if(Temp == 0b00000100){
   575  0090  3004               	movlw	4
   576  0091  0679               	xorwf	_Temp,w
   577  0092  1D03               	btfss	3,2
   578  0093  2895               	goto	u391
   579  0094  2896               	goto	u390
   580  0095                     u391:	
   581  0095  289A               	goto	l1213
   582  0096                     u390:	
   583  0096                     l1211:	
   584                           
   585                           ;main.c: 39:             PORTD = countE;
   586  0096  1283               	bcf	3,5	;RP0=0, select bank0
   587  0097  1303               	bcf	3,6	;RP1=0, select bank0
   588  0098  0820               	movf	_countE,w
   589  0099  0088               	movwf	8	;volatile
   590  009A                     l1213:	
   591                           
   592                           ;main.c: 42:         if(Temp == 0b00001000){
   593  009A  3008               	movlw	8
   594  009B  0679               	xorwf	_Temp,w
   595  009C  1D03               	btfss	3,2
   596  009D  289F               	goto	u401
   597  009E  28A0               	goto	u400
   598  009F                     u401:	
   599  009F  28A4               	goto	l1217
   600  00A0                     u400:	
   601  00A0                     l1215:	
   602                           
   603                           ;main.c: 43:             PORTD = countE;
   604  00A0  1283               	bcf	3,5	;RP0=0, select bank0
   605  00A1  1303               	bcf	3,6	;RP1=0, select bank0
   606  00A2  0820               	movf	_countE,w
   607  00A3  0088               	movwf	8	;volatile
   608  00A4                     l1217:	
   609                           
   610                           ;main.c: 46:         sw = ReadSw();
   611  00A4  120A  118A  2188  120A  118A  	fcall	_ReadSw
   612  00A9  1283               	bcf	3,5	;RP0=0, select bank0
   613  00AA  1303               	bcf	3,6	;RP1=0, select bank0
   614  00AB  00A9               	movwf	??_main
   615  00AC  0829               	movf	??_main,w
   616  00AD  00F8               	movwf	_sw
   617                           
   618                           ;main.c: 47:         while (sw == 0){
   619  00AE  28BF               	goto	l1225
   620  00AF                     l1219:	
   621                           
   622                           ;main.c: 48:             sw = ReadSw();
   623  00AF  120A  118A  2188  120A  118A  	fcall	_ReadSw
   624  00B4  1283               	bcf	3,5	;RP0=0, select bank0
   625  00B5  1303               	bcf	3,6	;RP1=0, select bank0
   626  00B6  00A9               	movwf	??_main
   627  00B7  0829               	movf	??_main,w
   628  00B8  00F8               	movwf	_sw
   629  00B9                     l1221:	
   630                           
   631                           ;main.c: 49:             if(sw == 1){
   632  00B9  0378               	decf	_sw,w
   633  00BA  1D03               	btfss	3,2
   634  00BB  28BD               	goto	u411
   635  00BC  28BE               	goto	u410
   636  00BD                     u411:	
   637  00BD  28BF               	goto	l1225
   638  00BE                     u410:	
   639  00BE  286E               	goto	l1197
   640  00BF                     l1225:	
   641                           
   642                           ;main.c: 47:         while (sw == 0){
   643  00BF  0878               	movf	_sw,w
   644  00C0  1903               	btfsc	3,2
   645  00C1  28C3               	goto	u421
   646  00C2  28C4               	goto	u420
   647  00C3                     u421:	
   648  00C3  28AF               	goto	l1219
   649  00C4                     u420:	
   650  00C4  2878               	goto	l1199
   651  00C5  120A  118A  280C   	ljmp	start
   652  00C8                     __end_of_main:	
   653                           
   654                           	psect	text1
   655  00C8                     __ptext1:	
   656 ;; *************** function _Select4 *****************
   657 ;; Defined at:
   658 ;;		line 63 in file "./prologue.c"
   659 ;; Parameters:    Size  Location     Type
   660 ;;		None
   661 ;; Auto vars:     Size  Location     Type
   662 ;;  result          1    2[BANK0 ] unsigned char 
   663 ;;  oldLEDs         1    1[BANK0 ] unsigned char 
   664 ;;  tmp             1    0[BANK0 ] unsigned char 
   665 ;; Return value:  Size  Location     Type
   666 ;;                  1    wreg      unsigned char 
   667 ;; Registers used:
   668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   669 ;; Tracked objects:
   670 ;;		On entry : 0/0
   671 ;;		On exit  : 0/0
   672 ;;		Unchanged: 0/0
   673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   674 ;;      Params:         0       0       0       0       0
   675 ;;      Locals:         0       3       0       0       0
   676 ;;      Temps:          3       0       0       0       0
   677 ;;      Totals:         3       3       0       0       0
   678 ;;Total ram usage:        6 bytes
   679 ;; Hardware stack levels used:    1
   680 ;; Hardware stack levels required when called:    2
   681 ;; This function calls:
   682 ;;		_ReadADC
   683 ;;		_ReadSw
   684 ;; This function is called by:
   685 ;;		_main
   686 ;; This function uses a non-reentrant model
   687 ;;
   688                           
   689                           
   690                           ;psect for function _Select4
   691  00C8                     _Select4:	
   692  00C8                     l1099:	
   693                           ;incstack = 0
   694                           ; Regs used in _Select4: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   695                           
   696                           
   697                           ;./prologue.c: 64:  unsigned char tmp, oldLEDs, result;;./prologue.c: 65:  oldLEDs=PORTD
      +                          ;
   698  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   699  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   700  00CA  0808               	movf	8,w	;volatile
   701  00CB  00F5               	movwf	??_Select4
   702  00CC  0875               	movf	??_Select4,w
   703  00CD  00A7               	movwf	Select4@oldLEDs
   704                           
   705                           ;./prologue.c: 66:  PORTD=0b00010000;
   706  00CE  3010               	movlw	16
   707  00CF  0088               	movwf	8	;volatile
   708  00D0                     l1101:	
   709                           
   710                           ;./prologue.c: 69:   tmp = ReadADC();
   711  00D0  120A  118A  21A3  120A  118A  	fcall	_ReadADC
   712  00D5  00F5               	movwf	??_Select4
   713  00D6  0875               	movf	??_Select4,w
   714  00D7  1283               	bcf	3,5	;RP0=0, select bank0
   715  00D8  1303               	bcf	3,6	;RP1=0, select bank0
   716  00D9  00A6               	movwf	Select4@tmp
   717  00DA                     l1103:	
   718                           
   719                           ;./prologue.c: 70:   tmp >>= 6;
   720  00DA  0EA6               	swapf	Select4@tmp,f
   721  00DB  0CA6               	rrf	Select4@tmp,f
   722  00DC  0CA6               	rrf	Select4@tmp,f
   723  00DD  3003               	movlw	3
   724  00DE  05A6               	andwf	Select4@tmp,f
   725                           
   726                           ;./prologue.c: 71:   switch (tmp) {
   727  00DF  28F2               	goto	l1111
   728  00E0                     l70:	
   729                           ;./prologue.c: 72:    case 0: result=1; break;
   730                           
   731  00E0  01A8               	clrf	Select4@result
   732  00E1  0AA8               	incf	Select4@result,f
   733  00E2  2908               	goto	l1113
   734  00E3                     l1105:	
   735  00E3  3002               	movlw	2
   736  00E4  00F5               	movwf	??_Select4
   737  00E5  0875               	movf	??_Select4,w
   738  00E6  00A8               	movwf	Select4@result
   739  00E7  2908               	goto	l1113
   740  00E8                     l1107:	
   741  00E8  3004               	movlw	4
   742  00E9  00F5               	movwf	??_Select4
   743  00EA  0875               	movf	??_Select4,w
   744  00EB  00A8               	movwf	Select4@result
   745  00EC  2908               	goto	l1113
   746  00ED                     l1109:	
   747  00ED  3008               	movlw	8
   748  00EE  00F5               	movwf	??_Select4
   749  00EF  0875               	movf	??_Select4,w
   750  00F0  00A8               	movwf	Select4@result
   751                           
   752                           ;./prologue.c: 76:   }
   753  00F1  2908               	goto	l1113
   754  00F2                     l1111:	
   755  00F2  0826               	movf	Select4@tmp,w
   756  00F3  00F5               	movwf	??_Select4
   757  00F4  01F6               	clrf	??_Select4+1
   758                           
   759                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   760                           ; Switch size 1, requested type "simple"
   761                           ; Number of cases is 1, Range of values is 0 to 0
   762                           ; switch strategies available:
   763                           ; Name         Instructions Cycles
   764                           ; simple_byte            4     3 (average)
   765                           ; direct_byte           11     8 (fixed)
   766                           ; jumptable            260     6 (fixed)
   767                           ;	Chosen strategy is simple_byte
   768  00F5  0876               	movf	??_Select4+1,w
   769  00F6  3A00               	xorlw	0	; case 0
   770  00F7  1903               	skipnz
   771  00F8  28FA               	goto	l1247
   772  00F9  2908               	goto	l1113
   773  00FA                     l1247:	
   774                           
   775                           ; Switch size 1, requested type "simple"
   776                           ; Number of cases is 4, Range of values is 0 to 3
   777                           ; switch strategies available:
   778                           ; Name         Instructions Cycles
   779                           ; simple_byte           13     7 (average)
   780                           ; direct_byte           20     8 (fixed)
   781                           ; jumptable            260     6 (fixed)
   782                           ;	Chosen strategy is simple_byte
   783  00FA  0875               	movf	??_Select4,w
   784  00FB  3A00               	xorlw	0	; case 0
   785  00FC  1903               	skipnz
   786  00FD  28E0               	goto	l70
   787  00FE  3A01               	xorlw	1	; case 1
   788  00FF  1903               	skipnz
   789  0100  28E3               	goto	l1105
   790  0101  3A03               	xorlw	3	; case 2
   791  0102  1903               	skipnz
   792  0103  28E8               	goto	l1107
   793  0104  3A01               	xorlw	1	; case 3
   794  0105  1903               	skipnz
   795  0106  28ED               	goto	l1109
   796  0107  2908               	goto	l1113
   797  0108                     l1113:	
   798                           
   799                           ;./prologue.c: 77:   PORTD = result | 0b00010000 | (oldLEDs & 0b11000000);
   800  0108  0827               	movf	Select4@oldLEDs,w
   801  0109  39C0               	andlw	192
   802  010A  0428               	iorwf	Select4@result,w
   803  010B  3810               	iorlw	16
   804  010C  0088               	movwf	8	;volatile
   805  010D                     l1115:	
   806                           
   807                           ;./prologue.c: 78:  } while( ReadSw() );
   808  010D  120A  118A  2188  120A  118A  	fcall	_ReadSw
   809  0112  3A00               	xorlw	0
   810  0113  1D03               	skipz
   811  0114  2916               	goto	u351
   812  0115  2917               	goto	u350
   813  0116                     u351:	
   814  0116  28D0               	goto	l1101
   815  0117                     u350:	
   816  0117                     l1117:	
   817                           
   818                           ;./prologue.c: 80:  PORTD = 0; _delay((unsigned long)((300)*(4000000/4000.0)));
   819  0117  1283               	bcf	3,5	;RP0=0, select bank0
   820  0118  1303               	bcf	3,6	;RP1=0, select bank0
   821  0119  0188               	clrf	8	;volatile
   822  011A                     l1119:	
   823  011A  3002               	movlw	2
   824  011B  00F7               	movwf	??_Select4+2
   825  011C  3086               	movlw	134
   826  011D  00F6               	movwf	??_Select4+1
   827  011E  3099               	movlw	153
   828  011F  00F5               	movwf	??_Select4
   829  0120                     u457:	
   830  0120  0BF5               	decfsz	??_Select4,f
   831  0121  2920               	goto	u457
   832  0122  0BF6               	decfsz	??_Select4+1,f
   833  0123  2920               	goto	u457
   834  0124  0BF7               	decfsz	??_Select4+2,f
   835  0125  2920               	goto	u457
   836  0126                     l1121:	
   837                           
   838                           ;./prologue.c: 81:  PORTD = result; _delay((unsigned long)((400)*(4000000/4000.0)));
   839  0126  1283               	bcf	3,5	;RP0=0, select bank0
   840  0127  1303               	bcf	3,6	;RP1=0, select bank0
   841  0128  0828               	movf	Select4@result,w
   842  0129  0088               	movwf	8	;volatile
   843  012A                     l1123:	
   844  012A  3003               	movlw	3
   845  012B  00F7               	movwf	??_Select4+2
   846  012C  3008               	movlw	8
   847  012D  00F6               	movwf	??_Select4+1
   848  012E  3077               	movlw	119
   849  012F  00F5               	movwf	??_Select4
   850  0130                     u467:	
   851  0130  0BF5               	decfsz	??_Select4,f
   852  0131  2930               	goto	u467
   853  0132  0BF6               	decfsz	??_Select4+1,f
   854  0133  2930               	goto	u467
   855  0134  0BF7               	decfsz	??_Select4+2,f
   856  0135  2930               	goto	u467
   857  0136                     l1125:	
   858                           
   859                           ;./prologue.c: 82:  PORTD = 0; _delay((unsigned long)((300)*(4000000/4000.0)));
   860  0136  1283               	bcf	3,5	;RP0=0, select bank0
   861  0137  1303               	bcf	3,6	;RP1=0, select bank0
   862  0138  0188               	clrf	8	;volatile
   863  0139  3002               	movlw	2
   864  013A  00F7               	movwf	??_Select4+2
   865  013B  3086               	movlw	134
   866  013C  00F6               	movwf	??_Select4+1
   867  013D  3099               	movlw	153
   868  013E  00F5               	movwf	??_Select4
   869  013F                     u477:	
   870  013F  0BF5               	decfsz	??_Select4,f
   871  0140  293F               	goto	u477
   872  0141  0BF6               	decfsz	??_Select4+1,f
   873  0142  293F               	goto	u477
   874  0143  0BF7               	decfsz	??_Select4+2,f
   875  0144  293F               	goto	u477
   876                           
   877                           ;./prologue.c: 84:  PORTD=oldLEDs;
   878  0145  1283               	bcf	3,5	;RP0=0, select bank0
   879  0146  1303               	bcf	3,6	;RP1=0, select bank0
   880  0147  0827               	movf	Select4@oldLEDs,w
   881  0148  0088               	movwf	8	;volatile
   882                           
   883                           ;./prologue.c: 85:  return result;
   884  0149  0828               	movf	Select4@result,w
   885  014A                     l76:	
   886  014A  0008               	return
   887  014B                     __end_of_Select4:	
   888                           
   889                           	psect	text2
   890  0188                     __ptext2:	
   891 ;; *************** function _ReadSw *****************
   892 ;; Defined at:
   893 ;;		line 54 in file "./prologue.c"
   894 ;; Parameters:    Size  Location     Type
   895 ;;		None
   896 ;; Auto vars:     Size  Location     Type
   897 ;;  tmp             1    4[COMMON] unsigned char 
   898 ;; Return value:  Size  Location     Type
   899 ;;                  1    wreg      unsigned char 
   900 ;; Registers used:
   901 ;;		wreg, status,2
   902 ;; Tracked objects:
   903 ;;		On entry : 0/0
   904 ;;		On exit  : 0/0
   905 ;;		Unchanged: 0/0
   906 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   907 ;;      Params:         0       0       0       0       0
   908 ;;      Locals:         1       0       0       0       0
   909 ;;      Temps:          2       0       0       0       0
   910 ;;      Totals:         3       0       0       0       0
   911 ;;Total ram usage:        3 bytes
   912 ;; Hardware stack levels used:    1
   913 ;; Hardware stack levels required when called:    1
   914 ;; This function calls:
   915 ;;		Nothing
   916 ;; This function is called by:
   917 ;;		_Select4
   918 ;;		_main
   919 ;;		_SelectB
   920 ;; This function uses a non-reentrant model
   921 ;;
   922                           
   923                           
   924                           ;psect for function _ReadSw
   925  0188                     _ReadSw:	
   926  0188                     l63:	
   927                           ;incstack = 0
   928                           ; Regs used in _ReadSw: [wreg+status,2]
   929                           ;./prologue.c: 55:  unsigned char tmp;;./prologue.c: 56:  do {
   930                           
   931  0188                     l1089:	
   932                           
   933                           ;./prologue.c: 57:   tmp = PORTB & 0b00000001;
   934  0188  1283               	bcf	3,5	;RP0=0, select bank0
   935  0189  1303               	bcf	3,6	;RP1=0, select bank0
   936  018A  0806               	movf	6,w	;volatile
   937  018B  3901               	andlw	1
   938  018C  00F2               	movwf	??_ReadSw
   939  018D  0872               	movf	??_ReadSw,w
   940  018E  00F4               	movwf	ReadSw@tmp
   941  018F                     l1091:	
   942                           
   943                           ;./prologue.c: 58:   _delay((unsigned long)((20)*(4000000/4000.0)));
   944  018F  301A               	movlw	26
   945  0190  00F3               	movwf	??_ReadSw+1
   946  0191  30F8               	movlw	248
   947  0192  00F2               	movwf	??_ReadSw
   948  0193                     u487:	
   949  0193  0BF2               	decfsz	??_ReadSw,f
   950  0194  2993               	goto	u487
   951  0195  0BF3               	decfsz	??_ReadSw+1,f
   952  0196  2993               	goto	u487
   953  0197  0000               	nop
   954  0198                     l1093:	
   955                           
   956                           ;./prologue.c: 59:  } while( tmp != (PORTB & 0b00000001) );
   957  0198  1283               	bcf	3,5	;RP0=0, select bank0
   958  0199  1303               	bcf	3,6	;RP1=0, select bank0
   959  019A  0806               	movf	6,w	;volatile
   960  019B  3901               	andlw	1
   961  019C  0674               	xorwf	ReadSw@tmp,w
   962  019D  1D03               	skipz
   963  019E  29A0               	goto	u341
   964  019F  29A1               	goto	u340
   965  01A0                     u341:	
   966  01A0  2988               	goto	l63
   967  01A1                     u340:	
   968  01A1                     l1095:	
   969                           
   970                           ;./prologue.c: 60:  return tmp;
   971  01A1  0874               	movf	ReadSw@tmp,w
   972  01A2                     l65:	
   973  01A2  0008               	return
   974  01A3                     __end_of_ReadSw:	
   975                           
   976                           	psect	text3
   977  01A3                     __ptext3:	
   978 ;; *************** function _ReadADC *****************
   979 ;; Defined at:
   980 ;;		line 47 in file "./prologue.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      unsigned char 
   987 ;; Registers used:
   988 ;;		wreg
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   994 ;;      Params:         0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0
   996 ;;      Temps:          0       0       0       0       0
   997 ;;      Totals:         0       0       0       0       0
   998 ;;Total ram usage:        0 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    1
  1001 ;; This function calls:
  1002 ;;		Nothing
  1003 ;; This function is called by:
  1004 ;;		_Select4
  1005 ;;		_main
  1006 ;;		_SelectB
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           
  1011                           ;psect for function _ReadADC
  1012  01A3                     _ReadADC:	
  1013  01A3                     l1083:	
  1014                           ;incstack = 0
  1015                           ; Regs used in _ReadADC: [wreg]
  1016                           
  1017                           
  1018                           ;./prologue.c: 48:  ADCON0 |= 0b00000010;
  1019  01A3  1283               	bcf	3,5	;RP0=0, select bank0
  1020  01A4  1303               	bcf	3,6	;RP1=0, select bank0
  1021  01A5  149F               	bsf	31,1	;volatile
  1022  01A6                     l57:	
  1023                           ;./prologue.c: 49:  while ( (ADCON0 & 0b00000010) );
  1024                           
  1025  01A6  189F               	btfsc	31,1	;volatile
  1026  01A7  29A9               	goto	u331
  1027  01A8  29AA               	goto	u330
  1028  01A9                     u331:	
  1029  01A9  29A6               	goto	l57
  1030  01AA                     u330:	
  1031  01AA                     l1085:	
  1032                           
  1033                           ;./prologue.c: 50:  return ADRESH;
  1034  01AA  081E               	movf	30,w	;volatile
  1035  01AB                     l60:	
  1036  01AB  0008               	return
  1037  01AC                     __end_of_ReadADC:	
  1038                           
  1039                           	psect	text4
  1040  014B                     __ptext4:	
  1041 ;; *************** function _myISR *****************
  1042 ;; Defined at:
  1043 ;;		line 61 in file "main.c"
  1044 ;; Parameters:    Size  Location     Type
  1045 ;;		None
  1046 ;; Auto vars:     Size  Location     Type
  1047 ;;		None
  1048 ;; Return value:  Size  Location     Type
  1049 ;;                  1    wreg      void 
  1050 ;; Registers used:
  1051 ;;		wreg
  1052 ;; Tracked objects:
  1053 ;;		On entry : 0/0
  1054 ;;		On exit  : 0/0
  1055 ;;		Unchanged: 0/0
  1056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1057 ;;      Params:         0       0       0       0       0
  1058 ;;      Locals:         0       0       0       0       0
  1059 ;;      Temps:          2       0       0       0       0
  1060 ;;      Totals:         2       0       0       0       0
  1061 ;;Total ram usage:        2 bytes
  1062 ;; Hardware stack levels used:    1
  1063 ;; This function calls:
  1064 ;;		Nothing
  1065 ;; This function is called by:
  1066 ;;		Interrupt level 1
  1067 ;; This function uses a non-reentrant model
  1068 ;;
  1069                           
  1070                           
  1071                           ;psect for function _myISR
  1072  014B                     _myISR:	
  1073  014B                     i1l1039:	
  1074                           
  1075                           ;main.c: 63:  if(TMR1IE && TMR1IF){
  1076  014B  1683               	bsf	3,5	;RP0=1, select bank1
  1077  014C  1303               	bcf	3,6	;RP1=0, select bank1
  1078  014D  1C0C               	btfss	12,0	;volatile
  1079  014E  2950               	goto	u27_21
  1080  014F  2951               	goto	u27_20
  1081  0150                     u27_21:	
  1082  0150  295E               	goto	i1l1047
  1083  0151                     u27_20:	
  1084  0151                     i1l1041:	
  1085  0151  1283               	bcf	3,5	;RP0=0, select bank0
  1086  0152  1303               	bcf	3,6	;RP1=0, select bank0
  1087  0153  1C0C               	btfss	12,0	;volatile
  1088  0154  2956               	goto	u28_21
  1089  0155  2957               	goto	u28_20
  1090  0156                     u28_21:	
  1091  0156  295E               	goto	i1l1047
  1092  0157                     u28_20:	
  1093  0157                     i1l1043:	
  1094                           
  1095                           ;main.c: 64:         TMR1IF = 0;
  1096  0157  100C               	bcf	12,0	;volatile
  1097  0158                     i1l1045:	
  1098                           
  1099                           ;main.c: 65:         countT++;
  1100  0158  3001               	movlw	1
  1101  0159  07A2               	addwf	_countT,f
  1102  015A  1803               	skipnc
  1103  015B  0AA3               	incf	_countT+1,f
  1104  015C  3000               	movlw	0
  1105  015D  07A3               	addwf	_countT+1,f
  1106  015E                     i1l1047:	
  1107                           
  1108                           ;main.c: 68:     if(ADIE && ADIF){
  1109  015E  1683               	bsf	3,5	;RP0=1, select bank1
  1110  015F  1303               	bcf	3,6	;RP1=0, select bank1
  1111  0160  1F0C               	btfss	12,6	;volatile
  1112  0161  2963               	goto	u29_21
  1113  0162  2964               	goto	u29_20
  1114  0163                     u29_21:	
  1115  0163  2971               	goto	i1l1055
  1116  0164                     u29_20:	
  1117  0164                     i1l1049:	
  1118  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1119  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1120  0166  1F0C               	btfss	12,6	;volatile
  1121  0167  2969               	goto	u30_21
  1122  0168  296A               	goto	u30_20
  1123  0169                     u30_21:	
  1124  0169  2971               	goto	i1l1055
  1125  016A                     u30_20:	
  1126  016A                     i1l1051:	
  1127                           
  1128                           ;main.c: 69:         ADIF = 0;
  1129  016A  130C               	bcf	12,6	;volatile
  1130  016B                     i1l1053:	
  1131                           
  1132                           ;main.c: 70:         countA++;
  1133  016B  3001               	movlw	1
  1134  016C  07A4               	addwf	_countA,f
  1135  016D  1803               	skipnc
  1136  016E  0AA5               	incf	_countA+1,f
  1137  016F  3000               	movlw	0
  1138  0170  07A5               	addwf	_countA+1,f
  1139  0171                     i1l1055:	
  1140                           
  1141                           ;main.c: 73:     if(INTE && INTF){
  1142  0171  1E0B               	btfss	11,4	;volatile
  1143  0172  2974               	goto	u31_21
  1144  0173  2975               	goto	u31_20
  1145  0174                     u31_21:	
  1146  0174  2981               	goto	i1l115
  1147  0175                     u31_20:	
  1148  0175                     i1l1057:	
  1149  0175  1C8B               	btfss	11,1	;volatile
  1150  0176  2978               	goto	u32_21
  1151  0177  2979               	goto	u32_20
  1152  0178                     u32_21:	
  1153  0178  2981               	goto	i1l115
  1154  0179                     u32_20:	
  1155  0179                     i1l1059:	
  1156                           
  1157                           ;main.c: 74:         INTF = 0;
  1158  0179  108B               	bcf	11,1	;volatile
  1159  017A                     i1l1061:	
  1160                           
  1161                           ;main.c: 75:         countE++;
  1162  017A  3001               	movlw	1
  1163  017B  1283               	bcf	3,5	;RP0=0, select bank0
  1164  017C  07A0               	addwf	_countE,f
  1165  017D  1803               	skipnc
  1166  017E  0AA1               	incf	_countE+1,f
  1167  017F  3000               	movlw	0
  1168  0180  07A1               	addwf	_countE+1,f
  1169  0181                     i1l115:	
  1170  0181  0871               	movf	??_myISR+1,w
  1171  0182  008A               	movwf	10
  1172  0183  0E70               	swapf	??_myISR^(0+4294967168),w
  1173  0184  0083               	movwf	3
  1174  0185  0EFE               	swapf	btemp,f
  1175  0186  0E7E               	swapf	btemp,w
  1176  0187  0009               	retfie
  1177  0188                     __end_of_myISR:	
  1178  007E                     btemp	set	126	;btemp
  1179  007E                     wtemp0	set	126
  1180                           
  1181                           	psect	intentry
  1182  0004                     __pintentry:	
  1183                           ;incstack = 0
  1184                           ; Regs used in _myISR: [wreg]
  1185                           
  1186  0004                     interrupt_function:	
  1187  007E                     saved_w	set	btemp
  1188  0004  00FE               	movwf	btemp
  1189  0005  0E03               	swapf	3,w
  1190  0006  00F0               	movwf	??_myISR
  1191  0007  080A               	movf	10,w
  1192  0008  00F1               	movwf	??_myISR+1
  1193  0009  120A  118A  294B   	ljmp	_myISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      6      12
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_Select4
    _Select4->_ReadSw

Critical Paths under _myISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Select4

Critical Paths under _myISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0     337
                                              3 BANK0      3     3      0
                            _ReadADC
                             _ReadSw
                            _Select4
 ---------------------------------------------------------------------------------
 (1) _Select4                                              6     6      0     272
                                              5 COMMON     3     3      0
                                              0 BANK0      3     3      0
                            _ReadADC
                             _ReadSw
 ---------------------------------------------------------------------------------
 (2) _ReadSw                                               3     3      0      65
                                              2 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (2) _ReadADC                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myISR                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ReadADC
   _ReadSw
   _Select4
     _ReadADC
     _ReadSw

 _myISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      16       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      6       C       5       15.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      16      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon May 04 11:20:35 2020

             __CFG_CP$OFF 0000                        l60 01AB                        l70 00E0  
                      l63 0188                        l57 01A6                        l65 01A2  
                      l76 014A                        _sw 0078                       _GIE 005F  
                     u400 00A0                       u401 009F                       u330 01AA  
                     u410 00BE                       u331 01A9                       u411 00BD  
                     u340 01A1                       u420 00C4                       u341 01A0  
                     u421 00C3                       u350 0117                       u351 0116  
                     u370 0082              __CFG_CPD$OFF 0000                       u371 0081  
                     u380 008C                       u381 008B                       u437 0044  
                     u390 0096                       u391 0095                       u447 0056  
                     u457 0120                       u467 0130                       u477 013F  
                     u487 0193              __CFG_LVP$OFF 0000                      l1101 00D0  
                    l1111 00F2                      l1103 00DA                      l1121 0126  
                    l1105 00E3                      l1113 0108                      l1201 007D  
                    l1123 012A                      l1115 010D                      l1107 00E8  
                    l1211 0096                      l1203 0082                      l1125 0136  
                    l1117 0117                      l1109 00ED                      l1221 00B9  
                    l1213 009A                      l1205 0086                      l1119 011A  
                    l1215 00A0                      l1207 008C                      l1225 00BF  
                    l1217 00A4                      l1209 0090                      l1161 002D  
                    l1083 01A3                      l1091 018F                      l1219 00AF  
                    l1171 0035                      l1163 002F                      l1155 001D  
                    l1085 01AA                      l1093 0198                      l1181 0064  
                    l1173 004B                      l1165 0030                      l1157 0027  
                    l1095 01A1                      l1247 00FA                      l1191 006B  
                    l1183 0065                      l1175 004E                      l1167 0031  
                    l1159 0029                      l1089 0188                      l1193 006C  
                    l1185 0066                      l1177 005D                      l1169 0033  
                    l1099 00C8                      l1195 006D                      l1187 0067  
                    l1179 0060                      l1197 006E                      l1189 0068  
                    l1199 0078                      _ADIE 0466                      _ADIF 0066  
                    _PEIE 005E                      _INTE 005C                      _INTF 0059  
            __CFG_WRT$OFF 0000                      _Temp 0079                      _main 001D  
                    btemp 007E                      start 000C             __CFG_IESO$OFF 0000  
           __CFG_MCLRE$ON 0000             Select4@result 0028           __end_of_ReadADC 01AC  
         __end_of_Select4 014B                     ?_main 0070             __CFG_WDTE$OFF 0000  
                   _ANSEL 0188                     _T1CON 0010                     i1l115 0181  
                   u30_20 016A                     u30_21 0169                     u31_20 0175  
                   u31_21 0174                     u32_20 0179                     u32_21 0178  
                   u27_20 0151                     u27_21 0150                     _PORTA 0005  
                   _PORTB 0006                     _PORTC 0007                     _PORTD 0008  
                   _PORTE 0009                     u28_20 0157                     u28_21 0156  
                   u29_20 0164                     u29_21 0163                     _TRISA 0085  
                   _TRISB 0086                     _TRISC 0087                     _TRISD 0088  
                   _TRISE 0089             __CFG_PWRTE$ON 0000            __CFG_FCMEN$OFF 0000  
                   _myISR 014B            __CFG_BOREN$OFF 0000                     pclath 000A  
                   status 0003                     wtemp0 007E            Select4@oldLEDs 0027  
              Select4@tmp 0026           __initialization 000F              __end_of_main 00C8  
                  ??_main 0029                    _ADCON0 001F                    _ADCON1 009F  
                  ?_myISR 0070                    _ADRESH 001E                    _ANSELH 0189  
                  i1l1041 0151                    i1l1051 016A                    i1l1043 0157  
                  i1l1061 017A                    i1l1053 016B                    i1l1045 0158  
                  i1l1055 0171                    i1l1047 015E                    i1l1039 014B  
                  i1l1057 0175                    i1l1049 0164                    i1l1059 0179  
                  _INTEDG 040E                    _TMR1IE 0460                    _TMR1IF 0060  
               ??_ReadADC 0072                    _ReadSw 0188                 ??_Select4 0075  
                  _countA 0024                    _countE 0020                    _countT 0022  
                  saved_w 007E   __end_of__initialization 0019            __pcstackCOMMON 0070  
           __end_of_myISR 0188                   ??_myISR 0070                __pbssBANK0 0020  
                 ?_ReadSw 0070                __pmaintext 001D                __pintentry 0004  
                 _ReadADC 01A3                   _Select4 00C8           __size_of_ReadSw 001B  
                 __ptext1 00C8                   __ptext2 0188                   __ptext3 01A3  
                 __ptext4 014B      end_of_initialization 0019                 ReadSw@tmp 0074  
          __end_of_ReadSw 01A3       start_initialization 000F  __CFG_FOSC$INTRC_NOCLKOUT 0000  
                ??_ReadSw 0072               __pbssCOMMON 0078                 ___latbits 0002  
           __pcstackBANK0 0026                  ?_ReadADC 0070                  ?_Select4 0070  
          __size_of_myISR 003D         interrupt_function 0004          __size_of_ReadADC 0009  
        __size_of_Select4 0083         __CFG_BOR4V$BOR21V 0000             __size_of_main 00AB  
                intlevel1 0000                _OPTION_REG 0081  
